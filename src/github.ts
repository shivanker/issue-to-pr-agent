import path from 'path';
import { Octokit } from '@octokit/rest';
import { WebhookPayloadIssues } from '@octokit/webhooks-types';
import { 
  GitContext, 
  RepoInfo, 
  IssueInfo, 
  PullRequestParams,
  WebhookPayloadWithInstallation 
} from './types';
import { 
  initializeGitRepo, 
  createBranch, 
  makeChanges, 
  commitAndPushChanges, 
  cleanUp 
} from './git';
import { config } from './config';

// Process an issue and create a PR with changes
export async function processIssue(
  octokit: Octokit, 
  payload: WebhookPayloadWithInstallation
): Promise<void> {
  // Extract repository information
  const repoInfo: RepoInfo = {
    owner: payload.repository.owner.login,
    repo: payload.repository.name,
    defaultBranch: payload.repository.default_branch,
  };
  
  // Extract issue information
  const issueInfo: IssueInfo = {
    number: payload.issue.number,
    title: payload.issue.title,
    body: payload.issue.body || '',
  };
  
  console.log(`Processing issue #${issueInfo.number} in ${repoInfo.owner}/${repoInfo.repo}`);
  
  // Create a unique working directory for this issue
  const workingDir = path.join(config.tempDir, `${repoInfo.owner}-${repoInfo.repo}-${issueInfo.number}-${Date.now()}`);
  
  // Create a unique branch name
  const branchName = `${config.prBranchPrefix}issue-${issueInfo.number}`;
  
  // Create the Git context
  const context: GitContext = {
    octokit,
    repoInfo,
    issueInfo,
    workingDir,
    branchName,
  };
  
  try {
    // Initialize Git repository
    const git = await initializeGitRepo(context);
    
    // Create a new branch
    await createBranch(git, branchName, repoInfo.defaultBranch);
    
    // Make changes based on the issue
    const changesSuccessful = await makeChanges(context);
    
    if (!changesSuccessful) {
      throw new Error('Failed to make changes to the repository');
    }
    
    // Commit and push changes
    await commitAndPushChanges(git, context);
    
    // Create a pull request
    await createPullRequest(octokit, context);
    
    // Add a comment to the issue
    await addIssueComment(octokit, context);
    
  } catch (error) {
    console.error('Error processing issue:', error);
    throw error;
  } finally {
    // Clean up temporary files
    await cleanUp(workingDir);
  }
}

// Create a pull request
async function createPullRequest(octokit: Octokit, context: GitContext): Promise<void> {
  const { repoInfo, issueInfo, branchName } = context;
  
  const prParams: PullRequestParams = {
    owner: repoInfo.owner,
    repo: repoInfo.repo,
    title: `${config.prTitle}${issueInfo.number}`,
    body: `${config.prBody}${issueInfo.number}\n\n${issueInfo.body}\n\nThis PR was automatically generated by the issue-to-pr-agent.`,
    head: branchName,
    base: repoInfo.defaultBranch,
  };
  
  console.log(`Creating PR for branch ${branchName}`);
  
  const { data: pullRequest } = await octokit.pulls.create(prParams);
  
  console.log(`Created PR #${pullRequest.number}: ${pullRequest.html_url}`);
}

// Add a comment to the issue
async function addIssueComment(octokit: Octokit, context: GitContext): Promise<void> {
  const { repoInfo, issueInfo } = context;
  
  await octokit.issues.createComment({
    owner: repoInfo.owner,
    repo: repoInfo.repo,
    issue_number: issueInfo.number,
    body: 'I\'ve created a pull request with some changes based on this issue. Please review when you have a chance!',
  });
  
  console.log(`Added comment to issue #${issueInfo.number}`);
}