import { promises as fs } from 'fs';
import path from 'path';
import simpleGit, { SimpleGit } from 'simple-git';
import { GitContext, RepoInfo, IssueInfo } from './types';
import { config } from './config';

// Initialize a Git repository in the working directory
export async function initializeGitRepo(context: GitContext): Promise<SimpleGit> {
  const { workingDir, repoInfo } = context;
  
  // Ensure the working directory exists
  await fs.mkdir(workingDir, { recursive: true });
  
  // Initialize Git
  const git = simpleGit(workingDir);
  
  // Configure Git user
  await git.addConfig('user.name', config.gitUserName);
  await git.addConfig('user.email', config.gitUserEmail);
  
  // Clone the repository
  const repoUrl = `https://x-access-token:${context.octokit.auth.token}@github.com/${repoInfo.owner}/${repoInfo.repo}.git`;
  await git.clone(repoUrl, workingDir);
  
  return git;
}

// Create a new branch for the changes
export async function createBranch(git: SimpleGit, branchName: string, baseBranch: string): Promise<void> {
  // Checkout the base branch
  await git.checkout(baseBranch);
  
  // Create and checkout a new branch
  await git.checkoutLocalBranch(branchName);
}

// Make changes to the repository based on the issue
export async function makeChanges(context: GitContext): Promise<boolean> {
  const { workingDir, issueInfo } = context;
  
  // This is a placeholder for the actual logic to make changes
  // In a real implementation, this would analyze the issue and make appropriate changes
  
  // For demonstration, we'll create a simple file with the issue details
  const filePath = path.join(workingDir, `issue-${issueInfo.number}.md`);
  const fileContent = `# ${issueInfo.title}\n\n${issueInfo.body}\n\nThis file was automatically generated by the issue-to-pr-agent.`;
  
  try {
    await fs.writeFile(filePath, fileContent);
    return true;
  } catch (error) {
    console.error('Error making changes:', error);
    return false;
  }
}

// Commit and push changes
export async function commitAndPushChanges(git: SimpleGit, context: GitContext): Promise<void> {
  const { issueInfo, branchName, repoInfo } = context;
  
  // Add all changes
  await git.add('.');
  
  // Commit changes
  const commitMessage = `Changes for issue #${issueInfo.number}: ${issueInfo.title}`;
  await git.commit(commitMessage);
  
  // Push changes to the remote repository
  await git.push('origin', branchName, ['--set-upstream']);
}

// Clean up temporary files
export async function cleanUp(workingDir: string): Promise<void> {
  try {
    await fs.rm(workingDir, { recursive: true, force: true });
  } catch (error) {
    console.error('Error cleaning up:', error);
  }
}